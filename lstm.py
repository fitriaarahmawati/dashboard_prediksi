# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PQE0TqPdTQByEmqTMwgF6xRGfWL9Eke9
"""

import pandas as pd
import numpy as np
import random
import tensorflow as tf
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, mean_absolute_error
import matplotlib.pyplot as plt

def load_data(filepath):
    df = pd.read_csv(filepath, parse_dates=["Date"], index_col="Date")
    df = df.sort_index()
    return df

# === Set parameter hasil PSO ===
lstm_pso = {
    "units": 68,
    "dropout": 0.12776104151854661,
    "learning_rate": 0.004720388604569275,
    "layers": 2,
    "batch_size": 47,
    "sequence_length": 12,
    "epochs": 73
}

lstm_gs = {
    "units": 16,
    "dropout": 0.2,
    "learning_rate": 0.01,
    "layers": 2,
    "batch_size": 16,
    "sequence_length": 60,
    "epochs": 100
}

best_params = {
    "lstm_pso": lstm_pso,
    "lstm_gs": lstm_gs
}

def set_seed(seed = 42):
  random.seed(seed)
  np.random.seed(seed)
  tf.random.set_seed(seed)

def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i+seq_length])
        y.append(data[i+seq_length])
    return np.array(X), np.array(y)

def predict_lstm(df, params):
    seq_len = params['sequence_length']
    units = params['units']
    dropout = params.get('dropout', 0.0)
    lr = params.get('learning_rate', 0.001)
    layers = params.get('layers', 1)
    batch_size = params['batch_size']
    epochs = params['epochs']

    data = df['Close'].values.reshape(-1, 1)
    scaler = MinMaxScaler()
    data_scaled = scaler.fit_transform(data)

    split = int(len(data_scaled) * 0.8)
    train = data_scaled[:split]
    test = data_scaled[split - seq_len:]

    X_train, y_train = create_sequences(train, seq_len)
    X_test, y_test = create_sequences(test, seq_len)

    X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
    X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

    model = Sequential()
    for i in range(layers):
        return_seq = (i < layers - 1)
        model.add(LSTM(units, return_sequences=return_seq, input_shape=(seq_len, 1)))
        if dropout > 0:
            model.add(Dropout(dropout))
    model.add(Dense(1))

    model.compile(optimizer=Adam(learning_rate=lr), loss='mse')
    model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=0)

    y_pred = model.predict(X_test)
    y_test_inv = scaler.inverse_transform(y_test.reshape(-1, 1)).flatten()
    y_pred_inv = scaler.inverse_transform(y_pred).flatten()
    return y_test_inv, y_pred_inv, scaler, model

def forecast_lstm(df, params, days):
    seq_len = params['sequence_length']
    units = params['units']
    dropout = params.get('dropout', 0.0)
    lr = params.get('learning_rate', 0.001)
    layers = params.get('layers', 1)
    batch_size = params['batch_size']
    epochs = params['epochs']

    data = df['Close'].values.reshape(-1, 1)
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(data)

    X_all, y_all = create_sequences(scaled_data, seq_len)
    X_all = X_all.reshape((X_all.shape[0], X_all.shape[1], 1))

    model = Sequential()
    for i in range(layers):
        return_seq = (i < layers - 1)
        model.add(LSTM(units, return_sequences=return_seq, input_shape=(seq_len, 1)))
        if dropout > 0:
            model.add(Dropout(dropout))
    model.add(Dense(1))

    model.compile(optimizer=Adam(learning_rate=lr), loss='mse')
    model.fit(X_all, y_all, epochs=epochs, batch_size=batch_size, verbose=0)

    forecast_scaled = []
    current_window = scaled_data[-seq_len:].reshape(1, seq_len, 1)

    for _ in range(days):
        next_pred = model.predict(current_window, verbose=0)[0][0]
        forecast_scaled.append(next_pred)
        current_window = np.append(current_window[:, 1:, :], [[[next_pred]]], axis=1)

    forecast = scaler.inverse_transform(np.array(forecast_scaled).reshape(-1, 1)).flatten()
    return forecast

def save_forecast_to_excel(forecast, filepath="forecast.xlsx"):
    import pandas as pd
    forecast_days = [f"Hari ke-{i+1}" for i in range(len(forecast))]
    df_forecast = pd.DataFrame({
        "Hari ke-": forecast_days,
        "Harga Prediksi": forecast
    })
    df_forecast.to_excel(filepath, index=False)

def evaluate_model(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    mape = mean_absolute_percentage_error(y_true, y_pred)

    return mse, rmse, mae, mape

def plot_lstm_prediction(y_test, y_pred, title="Prediksi vs Data Aktual"):
    """
    Menampilkan plot hasil prediksi dibandingkan dengan data aktual.

    Parameters:
    - y_test: nilai aktual
    - y_pred: hasil prediksi
    - title: judul plot
    """
    plt.figure(figsize=(10, 6))
    plt.plot(y_test, label='Data Aktual', color='black')
    plt.plot(y_pred, label='Prediksi LSTM', color='blue')
    plt.title(title)
    plt.xlabel("Waktu (Index)")
    plt.ylabel("Harga")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

def plot_forecast_only(df, forecast, forecast_days):
    """
    Menampilkan plot hasil prediksi harga ke depan.

    Parameters:
    - df: DataFrame historis (dengan kolom 'Close' dan index datetime)
    - forecast: array hasil forecast (output dari forecast_lstm)
    - forecast_days: jumlah hari yang diprediksi
    """
    df.index = pd.to_datetime(df.index)

    # Ambil 100 hari terakhir
    recent_data = df['Close'].values[-100:]
    recent_dates = df.index[-100:]

    # Tanggal untuk forecast
    last_date = df.index[-1]
    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=forecast_days, freq='D')

    # Plot
    plt.figure(figsize=(10, 6))
    plt.plot(recent_dates, recent_data, label='Data Historis', color='black')
    plt.plot(future_dates, forecast, label=f'Forecast {forecast_days} Hari', color='blue')
    plt.title(f'Prediksi Harga Kopi {forecast_days} Hari ke Depan')
    plt.xlabel('Tanggal')
    plt.ylabel('Harga')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()