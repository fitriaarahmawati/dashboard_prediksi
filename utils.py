# -*- coding: utf-8 -*-
"""Utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YX8G4TxUA-nSmcFfFBPuNoWcB_S5rqLe

## Library
"""

import joblib
import numpy as np
import os
import pandas as pd
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt

"""## Load data"""

def load_data(path):
    df = pd.read_csv(path)

    # Opsional: pastikan datetime & urut
    if 'Date' in df.columns:
        df['Date'] = pd.to_datetime(df['Date'])
        df = df.sort_values('Date')
        df.set_index('Date', inplace=True)

    return df

"""## Load model"""

def load_model_and_scaler(name, model_dir="model"):
    model_path = f"{model_dir}/{name}.h5"
    scaler_path = f"{model_dir}/{name}_scaler.pkl"

    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model file not found: {model_path}")
    if not os.path.exists(scaler_path):
        raise FileNotFoundError(f"Scaler file not found: {scaler_path}")

    model = load_model(model_path)
    scaler = joblib.load(scaler_path)

    return model, scaler

"""## Load evaluasi"""

def load_evaluation_from_csv(csv_path="evaluasi_model.csv"):
    if os.path.exists(csv_path):
        return pd.read_csv(csv_path)
    else:
        return pd.DataFrame()  # kembalikan DataFrame kosong jika file belum ada

"""## Load forecast"""

def load_forecast_result(pilih_model, pilih_hari):
    """
    Memuat hasil forecast dari file CSV berdasarkan model dan horizon prediksi.

    Parameters:
    - model_name (str): nama model (misal: "lstm_pso")
    - days (int): jumlah hari forecast (misal: 15)
    - folder (str): folder tempat file CSV disimpan

    Returns:
    - pd.DataFrame: DataFrame hasil forecast jika file ditemukan
    - None: jika file tidak ditemukan
    """
    model_map = {
        "LSTM-PSO": "lstm_pso",
        "LSTM-GS": "lstm_gs",
        "ELM-PSO": "elm_pso",
        "ELM-GS": "elm_gs",
        "LSTM-ELM-PSO": "lstm_elm_pso"
    }

    if not pilih_model or not pilih_hari:
        return None, None

    nama_model = model_map.get(pilih_model)
    nama_file = os.path.join("result_forecast", f"{nama_model}_{pilih_hari}hari.csv")

    if os.path.exists(nama_file):
        df_forecast = pd.read_csv(nama_file)
        return df_forecast, nama_file
    else:
        return None, nama_file

"""## Plot evaluasi"""

def plot_evaluasi(y_test, y_pred, title="Prediksi vs Data Aktual"):
    """
    Menampilkan plot hasil prediksi dibandingkan dengan data aktual.

    Parameters:
    - y_test: nilai aktual
    - y_pred: hasil prediksi
    - title: judul plot
    """

    plt.style.use('seaborn-vcolor')
    plt.figure(figsize=(12, 5))
    plt.plot(y_test, label='Aktual', color='#2c3e50')
    plt.plot(y_pred, label='Prediksi', linestyle='--', color='#e74c3c')
    plt.title(title, fontsize=14, fontweight='bold')
    plt.xlabel("Waktu")
    plt.ylabel("Harga")
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.3)
    plt.tight_layout()

    return plt.gcf()

"""## Plot prediksi"""

def plot_forecast(df, forecast, forecast_days, title="Forecast Harga"):
    plt.style.use('seaborn-vcolor')
    fig, ax = plt.subplots(figsize=(12, 5))

    # Ambil data historis terakhir
    recent_data = df['Close'].values[-100:]
    recent_dates = df.index[-100:]

    # Buat tanggal masa depan
    last_date = df.index[-1]
    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=forecast_days)

    ax.plot(recent_dates, recent_data, label="Data Historis", color="#34495e")
    ax.plot(future_dates, forecast, label="Forecast", linestyle="--", color="#2980b9")
    ax.set_title(title, fontsize=14, fontweight="bold")
    ax.set_xlabel("Tanggal")
    ax.set_ylabel("Harga")
    ax.legend()
    ax.grid(True, linestyle="--", alpha=0.3)
    fig.tight_layout()

    return fig
